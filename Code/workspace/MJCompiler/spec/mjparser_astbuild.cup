package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;
import java.io.*;

parser code {:
	
	boolean greska=false;
	
	Logger log = Logger.getLogger(getClass());
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	greska=true;
    	System.err.print(message);
    	System.err.flush();
    	if (info instanceof Symbol)
            System.err.println (" na liniji " + ((Symbol)info).left);
    	else System.err.println("");
    }
:}

scan with {:
	Symbol s = this.getScanner().next_token();
     if (s != null && s.value != null) 
	System.out.println(s.toString() + " " + s.value.toString());
	return s;
:}

init with{:
	greska=false;
:};

terminal CONST,PROGRAM,BREAK,CLASS,ELSE,IF,NEW,PRINT,READ,RETURN,VOID,DO,WHILE,EXTENDS,CONTINUE;

terminal String IDENT;
terminal String BOOLCONST;
terminal Integer NUMBER;
terminal Character CHARCONST;


terminal ADD,SUB,MUL,DIV,MOD;

terminal EQUAL,NOTEQUAL,GREATER,GREATEREQ,LESS,LESEQ;

terminal AND,OR,INC,DEC;

terminal SEMICOMA,COMMA,DOT;

terminal LPAREN,RPAREN,LBRACKET,RBRACKET,LBRACE,RBRACE;

terminal ASSIGN;



non terminal Program Program;
non terminal DeclarationList DeclarationList;
non terminal DeclarationPart DeclarationPart;

non terminal ConstDecl ConstDecl;
non terminal VarDecl VarDecl;


non terminal ConstList ConstList;
non terminal ConstPart ConstPart;


non terminal GlobalVarDecl GlobalVarDecl;
non terminal GlobalVarList GlobalVarList;
non terminal GlobalVarPart GlobalVarPart;

non terminal VarDeclList VarDeclList;
non terminal VarList VarList;
non terminal VarPart VarPart;

non terminal StatementList StatementList;
non terminal Statement Statement;

non terminal FunctionDeclList FunctionDeclList;
non terminal FunctionDecl FunctionDecl;
non terminal FunctionStart FunctionStart;


non terminal rs.etf.pp1.symboltable.concepts.Obj Type;
non terminal rs.etf.pp1.symboltable.concepts.Obj ProgramName,Designator,DesignatorLeft, Function,Expr,FuncCall,Term,Factor,DesignatorArray;
non terminal rs.etf.pp1.symboltable.concepts.Obj Mulop,Addop;


Program::=(Programm) PROGRAM ProgramName:o DeclarationList:D1 LBRACE FunctionDeclList:F2 RBRACE {: RESULT=new Programm(o, D1, F2); RESULT.setLine(oleft); :};

ProgramName::=(Program_name) IDENT:id {: RESULT=new Program_name(id); RESULT.setLine(idleft); :};


DeclarationList::=(Declaration_list) DeclarationList:D1 DeclarationPart:D2 {: RESULT=new Declaration_list(D1, D2); RESULT.setLine(D1left); :}
				|
				(No_declaration_list) {: RESULT=new No_declaration_list(); :};


DeclarationPart::=(Declaration_part_const) ConstDecl:C1 {: RESULT=new Declaration_part_const(C1); RESULT.setLine(C1left); :}
				|(Declaration_part_global)Type:T1 GlobalVarDecl:G2 {: RESULT=new Declaration_part_global(T1, G2); RESULT.setLine(T1left); :}
				;

ConstDecl::= (Const_decl) CONST Type:T1 ConstList:C2 SEMICOMA {: RESULT=new Const_decl(T1, C2); RESULT.setLine(T1left); :};

ConstList::=(Const_list1) ConstList:C1 COMMA ConstPart:C2 {: RESULT=new Const_list1(C1, C2); RESULT.setLine(C1left); :}
			|(Const_list2) ConstPart:C1 {: RESULT=new Const_list2(C1); RESULT.setLine(C1left); :} 
			;
ConstPart::=(Const_number) IDENT:id ASSIGN NUMBER:value {: RESULT=new Const_number(id, value); RESULT.setLine(idleft); :}
			|(Const_char) IDENT:id ASSIGN CHARCONST:value {: RESULT=new Const_char(id, value); RESULT.setLine(idleft); :}
			|(Const_bool)IDENT:id ASSIGN BOOLCONST:value {: RESULT=new Const_bool(id, value); RESULT.setLine(idleft); :}
			;

GlobalVarDecl::=(Global_var_decl1)GlobalVarList:G1 SEMICOMA {: RESULT=new Global_var_decl1(G1); RESULT.setLine(G1left); :}
				//|(Global_var_decl_error) error SEMICOMA:l
				//{:parser.report_error("Uspesan oporavak do ;  pri deklaraciji globalne promenljive u liniji " + lleft,null);:}
				;

GlobalVarList::=(Global_var_list1)GlobalVarList:G1 COMMA GlobalVarPart:G2 {: RESULT=new Global_var_list1(G1, G2); RESULT.setLine(G1left); :}
				|(Global_var_list2) GlobalVarPart:G1 {: RESULT=new Global_var_list2(G1); RESULT.setLine(G1left); :}
				|(Global_var_list_error) error:l
				{:parser.report_error("Uspesan oporavak do prvog ; ili sledeceg ,  pri deklaraciji globalne promenljive u liniji " + lleft,null);:} {: RESULT=new Global_var_list_error(); :}
				;

GlobalVarPart::=(Global_var_id) IDENT:id {: RESULT=new Global_var_id(id); RESULT.setLine(idleft); :}
				|(Global_var_array_id) IDENT:id LBRACKET RBRACKET {: RESULT=new Global_var_array_id(id); RESULT.setLine(idleft); :}//Ovde je bila dodata jos jedna smena prazna .Ja mislim da sam tu pogresila .
			
				;
				

Type::=(Typee) IDENT:id {: RESULT=new Typee(id); RESULT.setLine(idleft); :};


FunctionDeclList ::=(Func_dec1) FunctionDeclList:F1 FunctionDecl:F2 {: RESULT=new Func_dec1(F1, F2); RESULT.setLine(F1left); :} 
					|(Func_dec2) {: RESULT=new Func_dec2(); :}/* epsilon */ 
					;

Function ::=(Func_void2) VOID IDENT:name {: RESULT=new Func_void2(name); RESULT.setLine(nameleft); :}
			;
			
FunctionStart::=(FunctionStart1) Function:o LPAREN RPAREN VarDeclList:V1 LBRACE {: RESULT=new FunctionStart1(o, V1); RESULT.setLine(oleft); :} ;	

FunctionDecl ::=(Function_decl)FunctionStart:f StatementList:S1 RBRACE {: RESULT=new Function_decl(f, S1); RESULT.setLine(fleft); :} ;


VarDeclList::=(Var_decl_list)VarDeclList:V1 VarDecl:V2 {: RESULT=new Var_decl_list(V1, V2); RESULT.setLine(V1left); :}
			|
			(No_var_decl_list) {: RESULT=new No_var_decl_list(); :}/*epsilon*/
			;
VarDecl::=(Var_decl)Type:T1 VarList:V2 SEMICOMA {: RESULT=new Var_decl(T1, V2); RESULT.setLine(T1left); :};

VarList::=(Var_list1) VarList:V1 COMMA VarPart:V2 {: RESULT=new Var_list1(V1, V2); RESULT.setLine(V1left); :}
		 |(Var_list2) VarPart:V1 {: RESULT=new Var_list2(V1); RESULT.setLine(V1left); :}
		 ;

VarPart::=(Var_part1) IDENT:id {: RESULT=new Var_part1(id); RESULT.setLine(idleft); :}
		 |(Var_part2) IDENT:id LBRACKET RBRACKET {: RESULT=new Var_part2(id); RESULT.setLine(idleft); :}
		 ;


StatementList::=(Statement_list) StatementList:S1 Statement:S2 {: RESULT=new Statement_list(S1, S2); RESULT.setLine(S1left); :}
				| 
				(No_statement_list) {: RESULT=new No_statement_list(); :}/*epsilon*/
				;

Statement::=(Matched1) Designator:des ASSIGN DesignatorLeft:dleft SEMICOMA {: RESULT=new Matched1(des, dleft); RESULT.setLine(desleft); :}
	
		|(Designator_statement3) Designator:des INC SEMICOMA {: RESULT=new Designator_statement3(des); RESULT.setLine(desleft); :} 
		|(Designator_statement4) Designator:des DEC SEMICOMA {: RESULT=new Designator_statement4(des); RESULT.setLine(desleft); :}
		|(Designator_statement5) FuncCall:f LPAREN RPAREN SEMICOMA {: RESULT=new Designator_statement5(f); RESULT.setLine(fleft); :}
		|(Matched2) READ LPAREN Designator:des RPAREN SEMICOMA {: RESULT=new Matched2(des); RESULT.setLine(desleft); :}
		|(Matched3) PRINT LPAREN Expr:e RPAREN SEMICOMA {: RESULT=new Matched3(e); RESULT.setLine(eleft); :}
		|(Matched4) PRINT LPAREN Expr:e COMMA NUMBER:width RPAREN SEMICOMA {: RESULT=new Matched4(e, width); RESULT.setLine(eleft); :}
		;

DesignatorLeft::=(Designator_left)Expr:e {: RESULT=new Designator_left(e); RESULT.setLine(eleft); :} //Ovde sam pogresno nazvala to je DesignatorRight
				|(Designator_error)error:l//Ovde sam promenila jer sam imala da se greska detektuje u celom izrazu a ne samo u iskazu sa desne strane dodele vrednosti.
				{:parser.report_error("Uspesan oporavak do ; pri dodeli vrednosti u liniji " + lleft,null); :} {: RESULT=new Designator_error(); :}
				;
				
FuncCall::=(Func_des)Designator:func {: RESULT=new Func_des(func); RESULT.setLine(funcleft); :};	

Designator::=(Designator2)DesignatorArray:darr Expr:e RBRACKET {: RESULT=new Designator2(darr, e); RESULT.setLine(darrleft); :}
			|(Designator3)IDENT:name {: RESULT=new Designator3(name); RESULT.setLine(nameleft); :}
			;
DesignatorArray::=(DesignatorArray) Designator:des LBRACKET {: RESULT=new DesignatorArray(des); RESULT.setLine(desleft); :};
				 

Expr::=(Expr1)Expr:e Addop:A1 Term:t {: RESULT=new Expr1(e, A1, t); RESULT.setLine(eleft); :}
	  |(Expr2)Term:t {: RESULT=new Expr2(t); RESULT.setLine(tleft); :}
	  |(Expr3)SUB Term:t {: RESULT=new Expr3(t); RESULT.setLine(tleft); :}
	  ;

Term::=(Term1)Term:t Mulop:op Factor:f {: RESULT=new Term1(t, op, f); RESULT.setLine(tleft); :}
	  |(Term2)Factor:f {: RESULT=new Term2(f); RESULT.setLine(fleft); :}
	  ;
	  
Factor::=(Factor1)NUMBER:value {: RESULT=new Factor1(value); RESULT.setLine(valueleft); :}
		|(Factor2)CHARCONST:value {: RESULT=new Factor2(value); RESULT.setLine(valueleft); :}
		|(Factor3)BOOLCONST:value {: RESULT=new Factor3(value); RESULT.setLine(valueleft); :}
		|(Factor5)LPAREN Expr:e RPAREN {: RESULT=new Factor5(e); RESULT.setLine(eleft); :}
		|(Factor7)NEW Type:t LBRACKET Expr:e RBRACKET {: RESULT=new Factor7(t, e); RESULT.setLine(tleft); :}
		|(Factor8) Designator:des {: RESULT=new Factor8(des); RESULT.setLine(desleft); :}
		;

Addop::=(Addop1) ADD {: RESULT=new Addop1(); :}
	   |(Addop2) SUB {: RESULT=new Addop2(); :}
	   ;

Mulop::=(Mulop_mull) MUL {: RESULT=new Mulop_mull(); :}
	   |(Mulop_div) DIV {: RESULT=new Mulop_div(); :}
	   |(Mulop_mod) MOD {: RESULT=new Mulop_mod(); :}
	   ;




